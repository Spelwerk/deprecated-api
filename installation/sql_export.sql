-- MySQL Script generated by MySQL Workbench
-- Sun Sep 18 16:49:26 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema spelwerk
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `spelwerk` ;

-- -----------------------------------------------------
-- Schema spelwerk
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `spelwerk` DEFAULT CHARACTER SET utf8 ;
USE `spelwerk` ;

-- -----------------------------------------------------
-- Table `spelwerk`.`setting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `template` TINYINT(1) NOT NULL,
  `popularity` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`story`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`story` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`story` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `hash` VARCHAR(20) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `setting_id` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `hash_UNIQUE` (`hash` ASC),
  INDEX `fk_story_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_story_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`species`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`species` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`species` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`attributetype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`attributetype` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`attributetype` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `maximum` INT NOT NULL COMMENT 'Maximum Level of Attribute Type',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`manifestation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`manifestation` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`manifestation` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`attribute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`attribute` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`attribute` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `protected` TINYINT(1) NOT NULL COMMENT 'Is required in all settings for game to work',
  `attributetype_id` INT NOT NULL COMMENT 'Is Attribute Type',
  `manifestation_id` INT NULL COMMENT 'Requires Manifestation',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_attribute_attributetype1_idx` (`attributetype_id` ASC),
  INDEX `fk_attribute_manifestation1_idx` (`manifestation_id` ASC),
  CONSTRAINT `fk_attribute_attributetype1`
    FOREIGN KEY (`attributetype_id`)
    REFERENCES `spelwerk`.`attributetype` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_attribute_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`caste`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`caste` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`caste` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `attribute_id` INT NOT NULL COMMENT 'Gives Attribute',
  `attribute_value` INT NOT NULL COMMENT 'Gives Attribute Value',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_caste_attribute1_idx` (`attribute_id` ASC),
  CONSTRAINT `fk_caste_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`nature`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`nature` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`nature` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `attribute_id` INT NOT NULL COMMENT 'Gives Attribute',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_nature_attribute1_idx` (`attribute_id` ASC),
  CONSTRAINT `fk_nature_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`identity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`identity` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`identity` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `attribute_id` INT NOT NULL COMMENT 'Gives Attribute',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_identity_attribute1_idx` (`attribute_id` ASC),
  CONSTRAINT `fk_identity_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`focus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`focus` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`focus` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `attribute_id` INT NOT NULL COMMENT 'Gives Attribute',
  `manifestation_id` INT NOT NULL COMMENT 'Requires Manifestation',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_focus_attribute1_idx` (`attribute_id` ASC),
  INDEX `fk_focus_manifestation1_idx` (`manifestation_id` ASC),
  CONSTRAINT `fk_focus_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_focus_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `hash` VARCHAR(20) NOT NULL,
  `name_nick` VARCHAR(64) NOT NULL,
  `name_first` VARCHAR(64) NULL,
  `name_last` VARCHAR(64) NULL,
  `age` INT NOT NULL,
  `occupation` VARCHAR(64) NOT NULL,
  `gender` VARCHAR(64) NULL,
  `description` TEXT NULL,
  `behaviour` TEXT NULL,
  `appearance` TEXT NULL,
  `features` TEXT NULL,
  `personality` TEXT NULL,
  `template` TINYINT(1) NOT NULL,
  `popularity` INT NOT NULL,
  `setting_id` INT NOT NULL,
  `species_id` INT NOT NULL,
  `caste_id` INT NOT NULL,
  `nature_id` INT NOT NULL,
  `identity_id` INT NOT NULL,
  `manifestation_id` INT NULL,
  `focus_id` INT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `hash_UNIQUE` (`hash` ASC),
  INDEX `fk_person_setting1_idx` (`setting_id` ASC),
  INDEX `fk_person_species1_idx` (`species_id` ASC),
  INDEX `fk_person_caste1_idx` (`caste_id` ASC),
  INDEX `fk_person_nature1_idx` (`nature_id` ASC),
  INDEX `fk_person_identity1_idx` (`identity_id` ASC),
  INDEX `fk_person_manifestation1_idx` (`manifestation_id` ASC),
  INDEX `fk_person_focus1_idx` (`focus_id` ASC),
  CONSTRAINT `fk_person_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_species1`
    FOREIGN KEY (`species_id`)
    REFERENCES `spelwerk`.`species` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_caste1`
    FOREIGN KEY (`caste_id`)
    REFERENCES `spelwerk`.`caste` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_nature1`
    FOREIGN KEY (`nature_id`)
    REFERENCES `spelwerk`.`nature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_identity1`
    FOREIGN KEY (`identity_id`)
    REFERENCES `spelwerk`.`identity` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_focus1`
    FOREIGN KEY (`focus_id`)
    REFERENCES `spelwerk`.`focus` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`characteristic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`characteristic` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`characteristic` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `gift` TINYINT(1) NOT NULL,
  `species_id` INT NULL COMMENT 'Requires Species',
  `manifestation_id` INT NULL COMMENT 'Requires Manifestation',
  `attribute_id` INT NULL COMMENT 'Gives Attribute',
  `attribute_value` INT NULL COMMENT 'Gives Attribute Value',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_characteristic_species1_idx` (`species_id` ASC),
  INDEX `fk_characteristic_manifestation1_idx` (`manifestation_id` ASC),
  INDEX `fk_characteristic_attribute1_idx` (`attribute_id` ASC),
  CONSTRAINT `fk_characteristic_species1`
    FOREIGN KEY (`species_id`)
    REFERENCES `spelwerk`.`species` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_characteristic_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_characteristic_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`loyalty`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`loyalty` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`loyalty` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `value` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`milestone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`milestone` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`milestone` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `upbringing` TINYINT(1) NOT NULL,
  `caste_id` INT NOT NULL COMMENT 'Requires Caste',
  `manifestation_id` INT NULL COMMENT 'Requires Manifestation',
  `attribute_id` INT NULL COMMENT 'Gives Attribute',
  `attribute_value` INT NULL COMMENT 'Gives Attribute Value',
  `loyalty_id` INT NULL COMMENT 'Gives Relationship (and loyalty bonus)',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_milestone_caste1_idx` (`caste_id` ASC),
  INDEX `fk_milestone_attribute1_idx` (`attribute_id` ASC),
  INDEX `fk_milestone_loyalty1_idx` (`loyalty_id` ASC),
  INDEX `fk_milestone_manifestation1_idx` (`manifestation_id` ASC),
  CONSTRAINT `fk_milestone_caste1`
    FOREIGN KEY (`caste_id`)
    REFERENCES `spelwerk`.`caste` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_milestone_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_milestone_loyalty1`
    FOREIGN KEY (`loyalty_id`)
    REFERENCES `spelwerk`.`loyalty` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_milestone_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`species_has_attribute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`species_has_attribute` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`species_has_attribute` (
  `species_id` INT NOT NULL,
  `attribute_id` INT NOT NULL,
  `value` INT NULL,
  PRIMARY KEY (`species_id`, `attribute_id`),
  INDEX `fk_species_has_attribute_attribute1_idx` (`attribute_id` ASC),
  INDEX `fk_species_has_attribute_species1_idx` (`species_id` ASC),
  CONSTRAINT `fk_species_has_attribute_species1`
    FOREIGN KEY (`species_id`)
    REFERENCES `spelwerk`.`species` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_species_has_attribute_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`expertisetype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`expertisetype` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`expertisetype` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `maximum` INT NOT NULL COMMENT 'Maximum Level of Expertise Type',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`expertise`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`expertise` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`expertise` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `hidden` TINYINT(1) NOT NULL COMMENT 'Should not be displayed for purchase. Only available from other means.',
  `expertisetype_id` INT NOT NULL COMMENT 'Is Expertise Type',
  `species_id` INT NULL COMMENT 'Requires Species',
  `manifestation_id` INT NULL COMMENT 'Requires Manifestation',
  `skill_attribute_id` INT NOT NULL COMMENT 'Requires Skill',
  `give_attribute_id` INT NULL COMMENT 'Gives Attribute (Value based on level)',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_expertise_expertisetype1_idx` (`expertisetype_id` ASC),
  INDEX `fk_expertise_attribute1_idx` (`skill_attribute_id` ASC),
  INDEX `fk_expertise_species1_idx` (`species_id` ASC),
  INDEX `fk_expertise_manifestation1_idx` (`manifestation_id` ASC),
  INDEX `fk_expertise_attribute2_idx` (`give_attribute_id` ASC),
  CONSTRAINT `fk_expertise_expertisetype1`
    FOREIGN KEY (`expertisetype_id`)
    REFERENCES `spelwerk`.`expertisetype` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_expertise_attribute1`
    FOREIGN KEY (`skill_attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_expertise_species1`
    FOREIGN KEY (`species_id`)
    REFERENCES `spelwerk`.`species` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_expertise_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_expertise_attribute2`
    FOREIGN KEY (`give_attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`wound`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`wound` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`wound` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `lethal` TINYINT(1) NOT NULL,
  `popularity` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`weapongroup`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`weapongroup` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`weapongroup` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `skill_attribute_id` INT NOT NULL COMMENT 'Gets roll bonus from skill attribute',
  `damage_attribute_id` INT NOT NULL COMMENT 'Damages Defensive Attribute',
  `expertise_id` INT NOT NULL COMMENT 'Gets roll dice bonus from expertise',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_weapongroup_attribute1_idx` (`skill_attribute_id` ASC),
  INDEX `fk_weapongroup_expertise1_idx` (`expertise_id` ASC),
  INDEX `fk_weapongroup_attribute2_idx` (`damage_attribute_id` ASC),
  CONSTRAINT `fk_weapongroup_attribute1`
    FOREIGN KEY (`skill_attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weapongroup_expertise1`
    FOREIGN KEY (`expertise_id`)
    REFERENCES `spelwerk`.`expertise` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weapongroup_attribute2`
    FOREIGN KEY (`damage_attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`weapontype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`weapontype` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`weapontype` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `damage_d12` INT NOT NULL,
  `damage_bonus` INT NOT NULL,
  `critical_d12` INT NOT NULL,
  `hand` INT NOT NULL,
  `initiative` INT NOT NULL,
  `hit` INT NOT NULL,
  `distance` INT NOT NULL,
  `weapongroup_id` INT NOT NULL COMMENT 'Is Weapon Group',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_weapontype_weapongroup1_idx` (`weapongroup_id` ASC),
  CONSTRAINT `fk_weapontype_weapongroup1`
    FOREIGN KEY (`weapongroup_id`)
    REFERENCES `spelwerk`.`weapongroup` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`weapon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`weapon` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`weapon` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `price` INT NOT NULL,
  `hidden` TINYINT(1) NOT NULL COMMENT 'Will not be displayed for normal purchase',
  `legal` TINYINT(1) NOT NULL,
  `weapontype_id` INT NOT NULL COMMENT 'Is Weapon Type',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_weapon_weapontype1_idx` (`weapontype_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_weapon_weapontype1`
    FOREIGN KEY (`weapontype_id`)
    REFERENCES `spelwerk`.`weapontype` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`weaponquality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`weaponquality` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`weaponquality` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `price` INT NOT NULL,
  `damage_d12` INT NOT NULL,
  `damage_bonus` INT NOT NULL,
  `critical_d12` INT NOT NULL,
  `initiative` INT NOT NULL,
  `hit` INT NOT NULL,
  `distance` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`weaponmod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`weaponmod` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`weaponmod` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `short` VARCHAR(1) NOT NULL COMMENT 'Short Name of 1 char so that weapon can easily display which mods are active.',
  `price` INT NOT NULL,
  `damage_d12` INT NOT NULL,
  `damage_bonus` INT NOT NULL,
  `critical_d12` INT NOT NULL,
  `initiative` INT NOT NULL,
  `hit` INT NOT NULL,
  `distance` INT NOT NULL,
  `weapontype_id` INT NOT NULL COMMENT 'Modifies Weapon Type',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_weaponmod_weapontype1_idx` (`weapontype_id` ASC),
  CONSTRAINT `fk_weaponmod_weapontype1`
    FOREIGN KEY (`weapontype_id`)
    REFERENCES `spelwerk`.`weapontype` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`bodypart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`bodypart` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`bodypart` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`bionic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`bionic` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`bionic` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `price` INT NOT NULL,
  `energy` INT NOT NULL,
  `legal` TINYINT(1) NOT NULL,
  `bodypart_id` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_bionic_bodypart1_idx` (`bodypart_id` ASC),
  CONSTRAINT `fk_bionic_bodypart1`
    FOREIGN KEY (`bodypart_id`)
    REFERENCES `spelwerk`.`bodypart` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`augmentation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`augmentation` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`augmentation` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `price` INT NOT NULL,
  `energy` INT NOT NULL,
  `legal` TINYINT(1) NOT NULL,
  `bionic_id` INT NOT NULL COMMENT 'Can be inserted into Bionic',
  `attribute_id` INT NULL COMMENT 'Gives Attribute',
  `attribute_value` INT NULL COMMENT 'Gives Attribute Value',
  `weapon_id` INT NULL COMMENT 'Gives Weapon (When Augmentation is a weapon)',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_augmentation_bionic1_idx` (`bionic_id` ASC),
  INDEX `fk_augmentation_weapon1_idx` (`weapon_id` ASC),
  INDEX `fk_augmentation_attribute1_idx` (`attribute_id` ASC),
  CONSTRAINT `fk_augmentation_bionic1`
    FOREIGN KEY (`bionic_id`)
    REFERENCES `spelwerk`.`bionic` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_augmentation_weapon1`
    FOREIGN KEY (`weapon_id`)
    REFERENCES `spelwerk`.`weapon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_augmentation_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`bionicquality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`bionicquality` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`bionicquality` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `price` INT NOT NULL,
  `energy` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`augmentationquality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`augmentationquality` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`augmentationquality` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `price` INT NOT NULL,
  `energy` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`assetgroup`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`assetgroup` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`assetgroup` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`assettype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`assettype` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`assettype` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `assetgroup_id` INT NOT NULL COMMENT 'Is Asset Group',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_assettype_assetgroup1_idx` (`assetgroup_id` ASC),
  CONSTRAINT `fk_assettype_assetgroup1`
    FOREIGN KEY (`assetgroup_id`)
    REFERENCES `spelwerk`.`assetgroup` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`asset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`asset` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`asset` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `price` INT NOT NULL,
  `legal` TINYINT(1) NOT NULL,
  `assettype_id` INT NOT NULL COMMENT 'Is Asset Type',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_asset_assettype1_idx` (`assettype_id` ASC),
  CONSTRAINT `fk_asset_assettype1`
    FOREIGN KEY (`assettype_id`)
    REFERENCES `spelwerk`.`assettype` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`protectiontype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`protectiontype` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`protectiontype` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `attribute_id` INT NOT NULL COMMENT 'Improves Defensive Attribute',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_protectiontype_attribute1_idx` (`attribute_id` ASC),
  CONSTRAINT `fk_protectiontype_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`protection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`protection` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`protection` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `price` INT NOT NULL,
  `protectiontype_id` INT NOT NULL COMMENT 'Is Protection Type',
  `attribute_value` INT NOT NULL COMMENT 'Improves Defensive Attribute with Value',
  `bodypart_id` INT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_protection_protectiontype1_idx` (`protectiontype_id` ASC),
  INDEX `fk_protection_bodypart1_idx` (`bodypart_id` ASC),
  CONSTRAINT `fk_protection_protectiontype1`
    FOREIGN KEY (`protectiontype_id`)
    REFERENCES `spelwerk`.`protectiontype` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_protection_bodypart1`
    FOREIGN KEY (`bodypart_id`)
    REFERENCES `spelwerk`.`bodypart` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`protectionquality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`protectionquality` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`protectionquality` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `price` INT NOT NULL,
  `attribute_value` INT NOT NULL COMMENT 'Modifies Defensive Attribute Value',
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_attribute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_attribute` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_attribute` (
  `person_id` INT NOT NULL,
  `attribute_id` INT NOT NULL,
  `value` INT NOT NULL,
  PRIMARY KEY (`person_id`, `attribute_id`),
  INDEX `fk_person_has_attribute_attribute1_idx` (`attribute_id` ASC),
  INDEX `fk_person_has_attribute_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_attribute_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_attribute_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_characteristic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_characteristic` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_characteristic` (
  `person_id` INT NOT NULL,
  `characteristic_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `characteristic_id`),
  INDEX `fk_person_has_characteristic_characteristic1_idx` (`characteristic_id` ASC),
  INDEX `fk_person_has_characteristic_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_characteristic_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_characteristic_characteristic1`
    FOREIGN KEY (`characteristic_id`)
    REFERENCES `spelwerk`.`characteristic` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_milestone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_milestone` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_milestone` (
  `person_id` INT NOT NULL,
  `milestone_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `milestone_id`),
  INDEX `fk_person_has_milestone_milestone1_idx` (`milestone_id` ASC),
  INDEX `fk_person_has_milestone_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_milestone_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_milestone_milestone1`
    FOREIGN KEY (`milestone_id`)
    REFERENCES `spelwerk`.`milestone` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_expertise`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_expertise` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_expertise` (
  `person_id` INT NOT NULL,
  `expertise_id` INT NOT NULL,
  `level` INT NOT NULL,
  PRIMARY KEY (`person_id`, `expertise_id`),
  INDEX `fk_person_has_expertise_expertise1_idx` (`expertise_id` ASC),
  INDEX `fk_person_has_expertise_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_expertise_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_expertise_expertise1`
    FOREIGN KEY (`expertise_id`)
    REFERENCES `spelwerk`.`expertise` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_wound`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_wound` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_wound` (
  `person_id` INT NOT NULL,
  `wound_id` INT NOT NULL,
  `aid` TINYINT(1) NOT NULL,
  `heal` TINYINT(1) NOT NULL,
  PRIMARY KEY (`person_id`, `wound_id`),
  INDEX `fk_person_has_wound_wound1_idx` (`wound_id` ASC),
  INDEX `fk_person_has_wound_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_wound_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_wound_wound1`
    FOREIGN KEY (`wound_id`)
    REFERENCES `spelwerk`.`wound` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_weapon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_weapon` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_weapon` (
  `person_id` INT NOT NULL,
  `weapon_id` INT NOT NULL,
  `weaponquality_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `weapon_id`),
  INDEX `fk_person_has_weapon_weapon1_idx` (`weapon_id` ASC),
  INDEX `fk_person_has_weapon_person1_idx` (`person_id` ASC),
  INDEX `fk_person_has_weapon_weaponquality1_idx` (`weaponquality_id` ASC),
  CONSTRAINT `fk_person_has_weapon_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_weapon_weapon1`
    FOREIGN KEY (`weapon_id`)
    REFERENCES `spelwerk`.`weapon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_weapon_weaponquality1`
    FOREIGN KEY (`weaponquality_id`)
    REFERENCES `spelwerk`.`weaponquality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_weaponmod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_weaponmod` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_weaponmod` (
  `person_id` INT NOT NULL,
  `weaponmod_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `weaponmod_id`),
  INDEX `fk_person_has_weaponmod_weaponmod1_idx` (`weaponmod_id` ASC),
  INDEX `fk_person_has_weaponmod_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_weaponmod_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_weaponmod_weaponmod1`
    FOREIGN KEY (`weaponmod_id`)
    REFERENCES `spelwerk`.`weaponmod` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_bionic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_bionic` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_bionic` (
  `person_id` INT NOT NULL,
  `bionic_id` INT NOT NULL,
  `bionicquality_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `bionic_id`),
  INDEX `fk_person_has_bionic_bionic1_idx` (`bionic_id` ASC),
  INDEX `fk_person_has_bionic_person1_idx` (`person_id` ASC),
  INDEX `fk_person_has_bionic_bionicquality1_idx` (`bionicquality_id` ASC),
  CONSTRAINT `fk_person_has_bionic_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_bionic_bionic1`
    FOREIGN KEY (`bionic_id`)
    REFERENCES `spelwerk`.`bionic` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_bionic_bionicquality1`
    FOREIGN KEY (`bionicquality_id`)
    REFERENCES `spelwerk`.`bionicquality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_augmentation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_augmentation` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_augmentation` (
  `person_id` INT NOT NULL,
  `augmentation_id` INT NOT NULL,
  `augmentationquality_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `augmentation_id`),
  INDEX `fk_person_has_augmentation_augmentation1_idx` (`augmentation_id` ASC),
  INDEX `fk_person_has_augmentation_person1_idx` (`person_id` ASC),
  INDEX `fk_person_has_augmentation_augmentationquality1_idx` (`augmentationquality_id` ASC),
  CONSTRAINT `fk_person_has_augmentation_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_augmentation_augmentation1`
    FOREIGN KEY (`augmentation_id`)
    REFERENCES `spelwerk`.`augmentation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_augmentation_augmentationquality1`
    FOREIGN KEY (`augmentationquality_id`)
    REFERENCES `spelwerk`.`augmentationquality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_protection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_protection` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_protection` (
  `person_id` INT NOT NULL,
  `protection_id` INT NOT NULL,
  `protectionquality_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `protection_id`),
  INDEX `fk_person_has_protection_protection1_idx` (`protection_id` ASC),
  INDEX `fk_person_has_protection_person1_idx` (`person_id` ASC),
  INDEX `fk_person_has_protection_protectionquality1_idx` (`protectionquality_id` ASC),
  CONSTRAINT `fk_person_has_protection_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_protection_protection1`
    FOREIGN KEY (`protection_id`)
    REFERENCES `spelwerk`.`protection` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_protection_protectionquality1`
    FOREIGN KEY (`protectionquality_id`)
    REFERENCES `spelwerk`.`protectionquality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_asset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_asset` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_asset` (
  `person_id` INT NOT NULL,
  `asset_id` INT NOT NULL,
  `amount` INT NOT NULL,
  PRIMARY KEY (`person_id`, `asset_id`),
  INDEX `fk_person_has_asset_asset1_idx` (`asset_id` ASC),
  INDEX `fk_person_has_asset_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_asset_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_asset_asset1`
    FOREIGN KEY (`asset_id`)
    REFERENCES `spelwerk`.`asset` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`story_has_person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`story_has_person` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`story_has_person` (
  `story_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`story_id`, `person_id`),
  INDEX `fk_story_has_person_person1_idx` (`person_id` ASC),
  INDEX `fk_story_has_person_story1_idx` (`story_id` ASC),
  CONSTRAINT `fk_story_has_person_story1`
    FOREIGN KEY (`story_id`)
    REFERENCES `spelwerk`.`story` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_story_has_person_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_species`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_species` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_species` (
  `setting_id` INT NOT NULL,
  `species_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `species_id`),
  INDEX `fk_setting_has_species_species1_idx` (`species_id` ASC),
  INDEX `fk_setting_has_species_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_species_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_species_species1`
    FOREIGN KEY (`species_id`)
    REFERENCES `spelwerk`.`species` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_caste`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_caste` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_caste` (
  `setting_id` INT NOT NULL,
  `caste_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `caste_id`),
  INDEX `fk_setting_has_caste_caste1_idx` (`caste_id` ASC),
  INDEX `fk_setting_has_caste_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_caste_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_caste_caste1`
    FOREIGN KEY (`caste_id`)
    REFERENCES `spelwerk`.`caste` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_nature`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_nature` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_nature` (
  `setting_id` INT NOT NULL,
  `nature_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `nature_id`),
  INDEX `fk_setting_has_nature_nature1_idx` (`nature_id` ASC),
  INDEX `fk_setting_has_nature_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_nature_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_nature_nature1`
    FOREIGN KEY (`nature_id`)
    REFERENCES `spelwerk`.`nature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_identity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_identity` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_identity` (
  `setting_id` INT NOT NULL,
  `identity_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `identity_id`),
  INDEX `fk_setting_has_identity_identity1_idx` (`identity_id` ASC),
  INDEX `fk_setting_has_identity_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_identity_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_identity_identity1`
    FOREIGN KEY (`identity_id`)
    REFERENCES `spelwerk`.`identity` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_manifestation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_manifestation` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_manifestation` (
  `setting_id` INT NOT NULL,
  `manifestation_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `manifestation_id`),
  INDEX `fk_setting_has_manifestation_manifestation1_idx` (`manifestation_id` ASC),
  INDEX `fk_setting_has_manifestation_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_manifestation_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_manifestation_manifestation1`
    FOREIGN KEY (`manifestation_id`)
    REFERENCES `spelwerk`.`manifestation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_focus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_focus` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_focus` (
  `setting_id` INT NOT NULL,
  `focus_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `focus_id`),
  INDEX `fk_setting_has_focus_focus1_idx` (`focus_id` ASC),
  INDEX `fk_setting_has_focus_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_focus_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_focus_focus1`
    FOREIGN KEY (`focus_id`)
    REFERENCES `spelwerk`.`focus` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_attribute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_attribute` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_attribute` (
  `setting_id` INT NOT NULL,
  `attribute_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `attribute_id`),
  INDEX `fk_setting_has_attribute_attribute1_idx` (`attribute_id` ASC),
  INDEX `fk_setting_has_attribute_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_attribute_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_attribute_attribute1`
    FOREIGN KEY (`attribute_id`)
    REFERENCES `spelwerk`.`attribute` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_expertise`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_expertise` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_expertise` (
  `setting_id` INT NOT NULL,
  `expertise_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `expertise_id`),
  INDEX `fk_setting_has_expertise_expertise1_idx` (`expertise_id` ASC),
  INDEX `fk_setting_has_expertise_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_expertise_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_expertise_expertise1`
    FOREIGN KEY (`expertise_id`)
    REFERENCES `spelwerk`.`expertise` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_characteristic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_characteristic` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_characteristic` (
  `setting_id` INT NOT NULL,
  `characteristic_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `characteristic_id`),
  INDEX `fk_setting_has_characteristic_characteristic1_idx` (`characteristic_id` ASC),
  INDEX `fk_setting_has_characteristic_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_characteristic_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_characteristic_characteristic1`
    FOREIGN KEY (`characteristic_id`)
    REFERENCES `spelwerk`.`characteristic` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_milestone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_milestone` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_milestone` (
  `setting_id` INT NOT NULL,
  `milestone_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `milestone_id`),
  INDEX `fk_setting_has_milestone_milestone1_idx` (`milestone_id` ASC),
  INDEX `fk_setting_has_milestone_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_milestone_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_milestone_milestone1`
    FOREIGN KEY (`milestone_id`)
    REFERENCES `spelwerk`.`milestone` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_weapon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_weapon` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_weapon` (
  `setting_id` INT NOT NULL,
  `weapon_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `weapon_id`),
  INDEX `fk_setting_has_weapon_weapon1_idx` (`weapon_id` ASC),
  INDEX `fk_setting_has_weapon_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_weapon_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_weapon_weapon1`
    FOREIGN KEY (`weapon_id`)
    REFERENCES `spelwerk`.`weapon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_weaponmod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_weaponmod` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_weaponmod` (
  `setting_id` INT NOT NULL,
  `weaponmod_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `weaponmod_id`),
  INDEX `fk_setting_has_weaponmod_weaponmod1_idx` (`weaponmod_id` ASC),
  INDEX `fk_setting_has_weaponmod_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_weaponmod_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_weaponmod_weaponmod1`
    FOREIGN KEY (`weaponmod_id`)
    REFERENCES `spelwerk`.`weaponmod` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_bionic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_bionic` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_bionic` (
  `setting_id` INT NOT NULL,
  `bionic_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `bionic_id`),
  INDEX `fk_setting_has_bionic_bionic1_idx` (`bionic_id` ASC),
  INDEX `fk_setting_has_bionic_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_bionic_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_bionic_bionic1`
    FOREIGN KEY (`bionic_id`)
    REFERENCES `spelwerk`.`bionic` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_augmentation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_augmentation` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_augmentation` (
  `setting_id` INT NOT NULL,
  `augmentation_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `augmentation_id`),
  INDEX `fk_setting_has_augmentation_augmentation1_idx` (`augmentation_id` ASC),
  INDEX `fk_setting_has_augmentation_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_augmentation_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_augmentation_augmentation1`
    FOREIGN KEY (`augmentation_id`)
    REFERENCES `spelwerk`.`augmentation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_asset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_asset` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_asset` (
  `setting_id` INT NOT NULL,
  `asset_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `asset_id`),
  INDEX `fk_setting_has_asset_asset1_idx` (`asset_id` ASC),
  INDEX `fk_setting_has_asset_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_asset_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_asset_asset1`
    FOREIGN KEY (`asset_id`)
    REFERENCES `spelwerk`.`asset` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_protection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_protection` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_protection` (
  `setting_id` INT NOT NULL,
  `protection_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `protection_id`),
  INDEX `fk_setting_has_protection_protection1_idx` (`protection_id` ASC),
  INDEX `fk_setting_has_protection_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_protection_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_protection_protection1`
    FOREIGN KEY (`protection_id`)
    REFERENCES `spelwerk`.`protection` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`software`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`software` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`software` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  `price` INT NOT NULL,
  `hacking` INT NOT NULL,
  `hacking_bonus` INT NOT NULL,
  `legal` TINYINT(1) NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_software`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_software` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_software` (
  `person_id` INT NOT NULL,
  `software_id` INT NOT NULL,
  PRIMARY KEY (`person_id`, `software_id`),
  INDEX `fk_person_has_software_software1_idx` (`software_id` ASC),
  INDEX `fk_person_has_software_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_person_has_software_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_software_software1`
    FOREIGN KEY (`software_id`)
    REFERENCES `spelwerk`.`software` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`person_has_person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`person_has_person` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`person_has_person` (
  `person_id_1` INT NOT NULL,
  `person_id_2` INT NOT NULL,
  `loyalty_id` INT NOT NULL,
  `hash` VARCHAR(20) NULL,
  PRIMARY KEY (`person_id_1`, `person_id_2`),
  INDEX `fk_person_has_person_person2_idx` (`person_id_2` ASC),
  INDEX `fk_person_has_person_person1_idx` (`person_id_1` ASC),
  INDEX `fk_person_has_person_loyalty1_idx` (`loyalty_id` ASC),
  CONSTRAINT `fk_person_has_person_person1`
    FOREIGN KEY (`person_id_1`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_person_person2`
    FOREIGN KEY (`person_id_2`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_has_person_loyalty1`
    FOREIGN KEY (`loyalty_id`)
    REFERENCES `spelwerk`.`loyalty` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`user` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(128) NOT NULL,
  `password` TEXT NOT NULL,
  `seed` VARCHAR(64) NOT NULL,
  `email` VARCHAR(128) NULL,
  `admin` TINYINT(1) NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `deleted` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`user_has_story`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`user_has_story` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`user_has_story` (
  `user_id` INT NOT NULL,
  `story_id` INT NOT NULL,
  `hash` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`user_id`, `story_id`),
  INDEX `fk_user_has_story_story1_idx` (`story_id` ASC),
  INDEX `fk_user_has_story_user1_idx` (`user_id` ASC),
  CONSTRAINT `fk_user_has_story_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spelwerk`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_story_story1`
    FOREIGN KEY (`story_id`)
    REFERENCES `spelwerk`.`story` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`user_has_person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`user_has_person` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`user_has_person` (
  `user_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  `hash` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`user_id`, `person_id`),
  INDEX `fk_user_has_person_person1_idx` (`person_id` ASC),
  INDEX `fk_user_has_person_user1_idx` (`user_id` ASC),
  CONSTRAINT `fk_user_has_person_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spelwerk`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_person_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `spelwerk`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `spelwerk`.`setting_has_software`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spelwerk`.`setting_has_software` ;

CREATE TABLE IF NOT EXISTS `spelwerk`.`setting_has_software` (
  `setting_id` INT NOT NULL,
  `software_id` INT NOT NULL,
  PRIMARY KEY (`setting_id`, `software_id`),
  INDEX `fk_setting_has_software_software1_idx` (`software_id` ASC),
  INDEX `fk_setting_has_software_setting1_idx` (`setting_id` ASC),
  CONSTRAINT `fk_setting_has_software_setting1`
    FOREIGN KEY (`setting_id`)
    REFERENCES `spelwerk`.`setting` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_setting_has_software_software1`
    FOREIGN KEY (`software_id`)
    REFERENCES `spelwerk`.`software` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
